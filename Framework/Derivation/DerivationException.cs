using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;

namespace Framework.Derivation
{
    /// <summary>
    /// Represents the exception that occurs during validation of a data field when the
    /// Framework.Derivation.DerivationAttribute class is used.
    /// </summary>
    [Serializable]
    public class DerivationException : Exception
    {
        private IEnumerable<DerivationResult> _DerivationResults = Enumerable.Empty<DerivationResult>();

        private DerivationResult _DerivationResult;

        /// <summary>
        /// Gets a collection of the Framework.Derivation.DerivationResult instances 
        /// that describes the validation error.
        /// </summary>
        public IEnumerable<DerivationResult> ValidationResults { get => _DerivationResults.Union(new[] { DerivationResult }); }

        /// <summary>
        /// Gets the instance of the Framework.Derivation.DerivationAttribute
        /// class that triggered this exception.
        /// </summary>
        public DerivationAttribute DerivationAttribute { get; private set; }

        /// <summary>
        /// Gets the Framework.Derivation.DerivationResult instance
        /// instance that describes the validation error.
        /// </summary>
        public DerivationResult DerivationResult
        {
            get
            {
                if (_DerivationResult == null)
                {
                    _DerivationResult = new DerivationResult(Message);
                }
                return _DerivationResult;
            }
        }

        /// <summary>
        /// Gets the value of the object that triggered this exception.
        /// </summary>
        public object Value { get; private set; }

        /// <summary>
        /// Initializes a new instance of the Framework.Derivation.DerivationException class
        /// by using a specified error message, a collection of derivation results, and the 
        /// value being derived.
        /// </summary>
        /// <param name="errorMessage">The message that states the error.</param>
        /// <param name="derivationResults">The list of derivation results.</param>
        /// <param name="value">The value of the object that triggered the derivation error.</param>
        public DerivationException(string errorMessage, IEnumerable<DerivationResult> derivationResults, object value)
            : base(errorMessage)
        {
            Value = value;
            _DerivationResults = derivationResults;
        }

        /// <summary>
        /// Initializes a new instance of the Framework.Derivation.DerivationException class
        /// by usinga derivation result, the derivation attribute, and the value being derived.
        /// </summary>
        /// <param name="derivationResult">The derivation result.</param>
        /// <param name="derivingAttribute">The derivation attribute.</param>
        /// <param name="value">The value of the object that triggered the derivation error.</param>
        public DerivationException(DerivationResult derivationResult, DerivationAttribute derivingAttribute, object value)
            : this(derivationResult.ErrorMessage, derivingAttribute, value)
        {
            _DerivationResult = derivationResult;
        }

        /// <summary>
        /// Initializes a new instance of the Framework.Derivation.DerivationException class
        /// by using a specified error message, a derivation attribute, and the 
        /// value being derived.
        /// </summary>
        /// <param name="errorMessage">The message that states the error.</param>
        /// <param name="derivingAttribute">The derivation attribute.</param>
        /// <param name="value">The value of the object that triggered the derivation error.</param>
        public DerivationException(string errorMessage, DerivationAttribute derivingAttribute, object value)
            : base(errorMessage)
        {
            Value = value;
            DerivationAttribute = derivingAttribute;
        }

        /// <summary>
        /// Initializes a new instance of the Framework.Derivation.DerivationException
        /// class using an error message generated by the system.
        /// </summary>
        public DerivationException()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Framework.Derivation.DerivationException class
        /// by using a specified error message.
        /// </summary>
        /// <param name="message">The message that states the error.</param>
        public DerivationException(string message)
            : base(message) { }

        /// <summary>
        /// Initializes a new instance of the Framework.Derivation.DerivationException class
        /// by using a specified error message and a collection of inner exception instances.
        /// </summary>
        /// <param name="message">The message that states the error.</param>
        /// <param name="innerException">The collection of inner exceptions.</param>
        public DerivationException(string message, Exception innerException)
            : base(message, innerException) { }

        /// <summary>
        /// Initializes a new instance of the Framework.Derivation.DerivationException class using serialized data.
        /// </summary>
        /// <param name="info">The object that holds the serialized data.</param>
        /// <param name="context">Context information about the source or destination of the serialized object.</param>
        protected DerivationException(SerializationInfo info, StreamingContext context)
            : base(info, context) { }
    }
}
